/*
Author: Arthur Niu
Project: Hello World for Tomcat
Branch: Feature
*/
pipeline {
    agent { label 'Tomcat' }

    parameters {
        string(name: 'BUILD_BRANCH', defaultValue: 'master', description: 'Branch to build?')
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '3'))
        disableConcurrentBuilds()
    }

    triggers { 
        GenericTrigger(
            genericVariables: [
                [key: 'BUILD_BRANCH', value: '$.ref',
                 expressionType: 'JSONPath', 
                 regexpFilter: '']
            ],
            
            causeString: 'Triggered on Pull request $BUILD_BRANCH',
            
            token: 'feature_tomhelloworld_slave',
            
            printContributedVariables: true,
            printPostContent: true,
        ) 
    }

    stages {
        stage('Checkout'){
            steps{
                echo 'Removing original source code for internal - /opt/devops/nightly/tomcat'
                sh 'rm -rf /opt/devops/nightly/tomcat'
                ws('/opt/devops/nightly/tomcat'){
                    echo "Workspace dir is ${pwd()}"
                    echo "ref is ${.ref}"
                    echo "Branch to be checked out is ${params.BUILD_BRANCH}"
                    checkout([$class: 'GitSCM', branches: [[name: BUILD_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PruneStaleBranch'], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'helloworld']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/art-niu/helloworld.git']]])
                        
                }
            }
        }
        stage('Build'){
            parallel {
                stage('Build-Ant') {
                    steps{
                        ws('/opt/devops/nightly/tomcat'){
                           sh 'cd helloworld/tomcat/HelloWorld; /usr/bin/ant -f build.xml'
                        }
                        echo 'Build Done! You can find the binary at /opt/devops/nightly/tomcat/helloworld/tomcat/HelloWorld'
                    }
                }
            }
        }
    }
  
    post {
        always {
        	echo "Artifacts @ jenkins:/opt/artifacts/${params.BRANCH_NAME}"
        	echo "Logs @ jenkins:/opt/logs"
        	echo "Source code @ jenkins:/opt/devops"
        	echo "Workspace @ jenkins:/opt/jenkins"
        }

        success {
            echo " Build Success"
            emailext (
                subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: '${SCRIPT, template="jenkins-matrix-email-html.template"}',
                recipientProviders: [[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                to:'feijiangnan@hotmail.com ou.yuan@gmail.com',
                mimeType: 'text/html'
            )
        }
        failure {
            echo " Build Failed"
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: '${SCRIPT, template="jenkins-matrix-email-html.template"}' ,
                recipientProviders: [[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                to:'feijiangnan@hotmail.com ou.yuan@gmail.com',
                attachLog: true, 
                compressLog:false,
                mimeType: 'text/html'
            )
        }
    }    
}
